use std::time::{Duration, Instant};

fn get_p1_test_data() -> &'static str {
    "\
....#.....
.........#
..........
..#.......
.......#..
..........
.#..^.....
........#.
#.........
......#..."
}
fn get_p1_data() -> &'static str {
    "\
.................#.#............................................#................#........................................#.......
.....#.............................................................#.......#...#........................#...........#.......##....
..........................................................#..#........#..........#...............#.#..................#...........
..#...#..........#....#.....#......................................#......#..#............................#..#....................
.........................#....#.............#....................................#............................................#...
.....................#.......#.............#...#..........#.................#.......#...............#............#......#.........
........#.........#.....................................#............#.....................##...#..#..........#...................
....#...................#.....##......#............#...#........................#...................................#.............
...............................................................................#.......#.....#...#................#.#......##.....
..........................................#............................#.#.................................#.........#............
........#...............#...............#...................##......#..................#...............#..........................
.........................#....................................#..........#.........................................##.............
.......#.................#..................................#......#....................#...............#..........#......#.......
.............#.#...#.............#.............................................#...............................##.....#...#.......
.....................................................#............................................#.........................#.....
.#...#..........................................................##.................................#............#...............#.
...........#..#........#.....#.............#.......#............................................#..............#.................#
......#.#.##...............#.......#......#......................................................................#...............#
...#........#.#.....................##...#...........................#..............................#...................#.........
..............#..#....................#...................#.................##..............#.#........................#..........
...........................................................#.........#.......................#......................#.........#...
................................................#............................................#....................................
..#.....................................................#..............#...#.........#.....#........................#.............
.#..............................#......#..............#........................................................#..................
#......#.....#..#..#........#....................#...........##..............................#..#.....#.....#.....................
.................#.....#.....................#.........#..............................#..............##......................#....
...........................................................#...##..............#..........................#....#..................
........#..#............................#.#........................#.....#................#...#...................................
..........................#........#.......................................................................##...................#.
............#....#.............................................#.......#....#.....#........................................#......
..........#............#....#.......................#.#............#..............................................................
......#...#......................................................#..#.............................................................
.#...#.....#.....#......................................................................................#..........#.....#........
...#..#.............................................................................#.............................................
............#...................#...........................................#..............#.....#.....................#.##.......
.................................................#................................................................................
.........................#.......................................#..................#..............................#..............
................................................................................................................................#.
...#...........................................#........#.................................................#......#................
..#...........................................#.......#.....#.................................#....#.............#...............#
........#..............#...................................................................................#......................
...........#......#............#............#..................................#.........#..............#.........#..........#....
.........................#.........#.....#.................................#..................#...............##..#...............
.....#........#.........................................................#....................................#......#....#........
...#..#.......#......#.#..................#..........................^#...........................................................
....................#.#..........................................................................#...#............................
...........................#..........................................................#...........................................
................#..............................................................................#..................................
...............................#............................................................#...................................#.
..............#..........................................#..............#..................#..........#...........................
................#...#..........................#.##..........#.......#..............................#........#..............#.....
...................#.............#....................#...........................................................................
....#....................................#....#................................................#..#...........#...................
....#.#..............#..........#...................#...................................#....................#........#......#....
...........................#...........#..#......#.......................................#.......................#......#.........
.....................................................................................................#.................#..........
...................................................#.............#..........#..............................#......................
................................#...........##....................................................................#....#..........
...........#.......#.......................................................................#............#.....................#...
.#........#.......#........................................#.#...............................#...#...........................#....
..#...............#................#....#............#................................................................#...........
........#..........#.........#....................................................................................#...............
............................................................................#.............................#...............#......#
......................#................................#.............#...#............#...........................................
................................#.............#.................................................................#..............#..
.........#.#..#...............................#....................................................#.#.......#..#........#........
.............................#.......#.....#......................................................#..#............................
..................#.............................................................................#..........#......................
.....................................#....##.................#......................................#....#........................
#.......................................................................................................................#.........
......#....#..#...........................#..#.....#........................................#..................................#..
.......#.....#...............#....#......#....#..........#.....................#....#..........#.....#..#......................##.
..................#..........#.....#........................................................#............##...................#...
........................#....#............#..................................#....#..#.......#...................................#
.....#............................#...............................#..#...................#.....#..#........#....#.#...............
......#...#..#......#..........................#........#....................#.......#...........#..........................#..#..
.....#.............................................................................................#......#......................#
...........................................#......................................................................................
.....#...........................#.#.#............................#..................#............................#.......#.......
........#.......................................................#...................#.......#.....................................
...............#..................................................#.................................................#.............
..##............................................................#..............................................................#..
.......#..................................#......................#.................................#...................#..........
......#.........#..............#....##........#....#................................#.....................................#......#
................#.....................................................................................#.............#.............
#..#..#......#.#.....#..#.................................................................................................#..#....
.....................#.....#................................................#.......#........#.................#........#.#...#...
..................................................................#....#..#...................#................................#..
........................#...........#.......................................................#..#..................................
.#.......#...................................................#..............#.......#...#.........................................
.......##...............#.............................#...........................#...............................................
....#............#....#...#........................#...........................#.#.....#..........................................
...........................#............................#..#..................#...........................#...#...................
...........#.#.............#..........#...........................................................................................
.............#..........#...............#...##.........................#..............#...#.............#..#......................
..................#.....#............#..#.........#...............................................................................
...........................................................#.....#..................#.......................#..#..................
....................................#....#.......##............#.............................#...............#...........#........
......#....................#..................#..........................................#...............................#.#......
......................#...........................................#.....#.................................................#....#..
.....................................#...............#....................................#.....#.............#......##...........
......................#...............................................................##.#..........#....#..................#.....
...........#.............#......................#....................#..................................#......#...........##.....
.....#.#...#......................................................................................................................
.........#.....................................#................#.............#....#......................#..........#............
......##.#.................#...............#..##.......................#...............#.......................................#..
....................#.........#.......#....#..................................#..........................#..............#.........
......................#....#..#..#................................#.......#.......................................................
.........................................##............................##..#..................#..................#...........#....
...................#..................................#................................................................#..........
.#.............#....................................................................................#.............................
......................................#.....#.............#..#............................................#...#............#......
.....................................#..................................#...#.......................##...................#........
...........................................................#...................................................#...........#......
.............................#.......#.......................................#.........................#.....................#...#
.....................#............................................................................................................
#....#.......................................#.........#........#...................................#.....#.........#........#....
.......................................................#......#................................##.#........#.........#..........#.
.........#........................##.....#.............................................................#.................#..#.....
....##....................................................................................................#...#...#...............
.......#.....#.......#.............#........#...............##.#......#...............#.................#..#.........#...#....#...
....................#.................................#........................................................................#..
#...............#....................................#.........#...............................#..#..........##...#...#......#....
............#........................#.....#...#.........#.........#..#......................................#....................
..........#.......#.#.....................#...........#...................#.##....................#..#...#........#..............#
.......................................#.......#........#.....#...........................................#.......#......#........
...............................#.........#..............#......................#..........................................#.#.....
............#........#.............................................#.....................................................##......#
......#.#............................................................................#......#.....#......#................#.......
.........#.............#................#.................#..###..........#.........................#.#....#......................"
}
struct MapSpace {
    space: char,
    guard: char,
    visited: bool,
}
impl MapSpace {
    fn new(v: char) -> MapSpace {
        let mut s = MapSpace {
            space: '.',
            guard: ' ',
            visited: false,
        };
        match v {
            '#' => s.space = v,
            '>' | '<' | '^' | 'v' | 'V' => {
                s.guard = v;
                s.visited = true;
            }
            _ => {}
        }
        s
    }
    fn is_obstruction(&self) -> bool {
        self.space == '#'
    }
    fn was_visited(&self) -> bool {
        self.visited
    }
    fn is_guard_val(v: char) -> bool {
        matches!(v, '>' | '<' | '^' | 'v' | 'V')
    }
    fn is_guard(&self) -> bool {
        Self::is_guard_val(self.guard)
    }
    fn get_guard_dir(&self) -> Option<(isize, isize)> {
        match self.guard {
            '>' => Some((1, 0)),
            '<' => Some((-1, 0)),
            '^' => Some((0, -1)),
            'v' => Some((0, 1)),
            'V' => Some((0, 1)),
            _ => None,
        }
    }
    fn get_normal(&self) -> char {
        if self.is_guard() {
            self.guard
        } else {
            self.space
        }
    }
    fn get_visited(&self) -> char {
        if self.was_visited() {
            'X'
        } else {
            self.get_normal()
        }
    }
    fn clear_guard(&mut self) {
        self.guard = ' ';
    }
    fn set_guard(&mut self, v: char) {
        self.guard = v;
        self.visited = true;
    }
    fn rotate_guard(&mut self) {
        match self.guard {
            '>' => self.guard = 'v',
            '<' => self.guard = '^',
            '^' => self.guard = '>',
            'v' => self.guard = '<',
            'V' => self.guard = '<',
            _ => {}
        }
    }
}
struct Map {
    rows: isize,
    cols: isize,
    map: Vec<MapSpace>,
}
impl Map {
    fn new(d: &str) -> Map {
        let mut m = Map {
            rows: 0,
            cols: 0,
            map: Vec::new(),
        };
        for l in d.lines() {
            m.rows += 1;
            let mut col_count = 0;
            for c in l.chars() {
                col_count += 1;
                m.map.push(MapSpace::new(c));
            }
            if m.cols == 0 {
                m.cols = col_count;
            }
            if m.cols != col_count {
                panic!(
                    "column counts vary between row {} and row {}",
                    m.rows - 1,
                    m.rows
                );
            }
        }
        m
    }
    fn i_to_xy(&self, i: isize) -> (isize, isize) {
        let x = i % self.cols;
        let y = i / self.cols;
        (x, y)
    }
    fn xy_to_i(&self, (x, y): (isize, isize)) -> isize {
        y * self.cols + x
    }
    fn iterate_xy(&self, f: fn(&MapSpace) -> char) -> String {
        let mut s = String::new();
        for y in 0..self.rows {
            for x in 0..self.cols {
                let i = self.xy_to_i((x, y));
                let u_i = i as usize;
                let ms = &self.map[u_i];
                s.push(f(ms));
            }
            s.push('\n');
        }
        s
    }
    fn get_normal(&self) -> String {
        self.iterate_xy(|ms| ms.get_normal())
    }
    fn get_visited(&self) -> String {
        self.iterate_xy(|ms| ms.get_visited())
    }
    fn guard_pos(&self) -> Option<isize> {
        let p = self.map.iter().position(|ms| ms.is_guard())?;
        Some(p as isize)
    }
    fn is_valid_pos(&self, (x, y): (isize, isize)) -> bool {
        (0..self.cols).contains(&x) && (0..self.rows).contains(&y)
    }
    fn move_guard(&mut self) -> bool {
        if let Some(cur_i) = self.guard_pos() {
            let u_cur_i = cur_i as usize;
            let (cur_x, cur_y) = self.i_to_xy(cur_i);
            let cur_g = &self.map[u_cur_i];
            let (dx, dy) = cur_g.get_guard_dir().unwrap();
            let (new_x, new_y) = (cur_x + dx, cur_y + dy);
            let char_g = cur_g.guard;
            if self.is_valid_pos((new_x, new_y)) {
                let new_i = self.xy_to_i((new_x, new_y));
                let u_new_i = new_i as usize;
                if self.map[u_new_i].is_obstruction() {
                    self.map[u_cur_i].rotate_guard();
                } else {
                    self.map[u_cur_i].clear_guard();
                    self.map[u_new_i].set_guard(char_g);
                }
            } else {
                self.map[u_cur_i].clear_guard();
            }
            return true;
        }
        false
    }
    fn get_count_visited(&self) -> isize {
        self.get_visited().chars().filter(|&c| c == 'X').count() as isize
    }
}
fn clear_screen() {
    print!("{esc}[2J{esc}[1;1H", esc = 27 as char);
    //print!("{esc}[2J", esc = 27 as char);
}
fn animated_move(m: &mut Map) {
    print!("{}", m.get_normal());
    while m.move_guard() {
        std::thread::sleep(Duration::from_millis(10));
        clear_screen();
        print!("{}", m.get_normal());
    }
}
fn unanimated_move(m: &mut Map) {
    while m.move_guard() {}
}
fn p1(l: usize) {
    let _x = get_p1_test_data();
    let s = Instant::now();
    let mut m = Map::new(get_p1_data());
    if l > 1 {
        animated_move(&mut m);
    } else {
        unanimated_move(&mut m);
    }
    println!("{}x{} {}", m.cols, m.rows, m.get_count_visited());
    println!("{:?}", s.elapsed());
}
fn main() {
    p1(std::env::args().collect::<Vec<_>>().len());
}
#[cfg(test)]
pub mod tests {
    use super::*;
    fn get_test_map() -> Map {
        Map::new(get_p1_test_data())
    }
    #[test] fn test_xy_to_i_on_test_data() {
        let m = get_test_map();
        assert_eq!(11, m.xy_to_i((1, 1)));
        assert_eq!(80, m.xy_to_i((0, 8)));
        assert_eq!(29, m.xy_to_i((9, 2)));
    }
    #[test] fn test_i_to_xy_on_test_data() {
        let m = get_test_map();
        assert_eq!((1, 1), m.i_to_xy(11));
        assert_eq!((0, 8), m.i_to_xy(80));
        assert_eq!((9, 2), m.i_to_xy(29));
    }
    #[test] fn test_p1_test_data() {
        let mut m = get_test_map();
        while m.move_guard() {}
        assert_eq!(41, m.get_count_visited());
    }
    #[test] fn test_p1() {
        let mut m = Map::new(get_p1_data());
        while m.move_guard() {}
        assert_eq!(4973, m.get_count_visited());
    }
}
